{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["import type { PluginListenerHandle } from '@capacitor/core';\n\nexport interface SubscriptionsPlugin {\n  echo(options: { value: string }): Promise<{ value: string }>;\n\n  /**\n   * Fetch metadata for a single subscription product by its identifier.\n   */\n  getProductDetails(options: { productIdentifier: string }): Promise<Product>;\n\n  /**\n   * Fetch metadata for multiple subscription products in one batch request.\n   */\n  getProductDetailsBatch(options: { productIds: string[] }): Promise<{ products: Product[] }>;\n\n  /**\n   * Initiate a purchase flow for a subscription product.\n   */\n  purchaseProduct(options: { productIdentifier: string; appAccountToken?: string }): Promise<AppleTransaction>;\n  purchaseProduct(options: {\n    productIdentifier: string;\n    obfuscatedAccountId?: string;\n    offerToken?: string;\n  }): Promise<GoogleTransaction>;\n  purchaseProduct(options: { productIdentifier: string }): Promise<Transaction>;\n\n  /**\n   * Query all active entitlements (non-expired subscriptions).\n   */\n  getCurrentEntitlements(): Promise<{ entitlements: Transaction[] }>;\n\n  /**\n   * Returns the most recent transaction for a given product identifier.\n   */\n  getLatestTransaction(options: { productIdentifier: string }): Promise<Transaction>;\n\n  /**\n   * Opens the platform-native subscription management UI (App Store / Play Store).\n   */\n  manageSubscriptions(): any;\n\n  /**\n   * Acknowledge a Google Play purchase after processing.\n   */\n  acknowledgePurchase(options: { purchaseToken: string }): Promise<void>;\n\n  /**\n   * Required for Google Play purchase validation via a server.\n   */\n  setGoogleVerificationDetails(options: { googleVerifyEndpoint: string; bid: string }): void;\n\n  addListener(\n    eventName: 'ANDROID-PURCHASE-SUCCESS',\n    listenerFunc: (response: GoogleTransaction) => void,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  addListener(\n    eventName: 'ANDROID-PURCHASE-ERROR',\n    listenerFunc: () => void,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n}\n\nexport interface Product {\n  id: string;\n  baseProductId?: string; // Google Play only\n  title: string;\n  description: string;\n  price: number; // raw numeric price\n  localizedPrice: string; // formatted, e.g. \"â‚¬9.99\"\n  currency?: string; // Stripe/Google only, not on iOS\n  type: 'subscription' | 'non-subscription';\n  interval?: SubscriptionInterval;\n  intervalCount?: number; // e.g. every 3 months\n\n  hasIntroOffer?: boolean;\n  introPrice?: number;\n  introPriceString?: string;\n  introPeriod?: SubscriptionInterval;\n  introPeriodCount?: number;\n\n  hasFreeTrial?: boolean;\n  trialPeriod?: SubscriptionInterval;\n  trialPeriodCount?: number;\n\n  subscriptionGroup?: string;\n  isFamilyShareable?: boolean;\n  source: 'apple' | 'google' | 'stripe';\n  offerToken?: string; // Google Play offer token\n}\n\n// Supported billing intervals (mirrors StoreKit and Google BillingClient)\nexport type SubscriptionInterval = 'day' | 'week' | 'month' | 'year';\n\n// Platform-independent base structure for all transactions\nexport interface BaseTransaction {\n  productIdentifier: string;\n  expiryDate: string;\n  originalId: string;\n  transactionId: string;\n  originalStartDate: string;\n  isTrial?: boolean;\n}\n\n// Apple-specific transaction extension\nexport interface AppleTransaction extends BaseTransaction {\n  appAccountToken: string;\n}\n\n// Google-specific transaction extension\nexport interface GoogleTransaction extends BaseTransaction {\n  isAcknowledged: boolean;\n  purchaseToken: string;\n  obfuscatedAccountId?: string;\n}\n\n// Union type for handling transactions generically\nexport type Transaction = AppleTransaction | GoogleTransaction;\n\n// Purchase result trigger used in listeners\nexport type AndroidPurchasedTrigger =\n  | { successful: true; data: GoogleTransaction }\n  | { successful: false; data: never };\n"]}