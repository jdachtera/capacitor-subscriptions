{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAI5C,MAAM,OAAO,gBAAiB,SAAQ,SAAS;IAC7C,4BAA4B,CAAC,OAAsD;QACjF,OAAO,CAAC;IACV,CAAC;IACD,KAAK,CAAC,IAAI,CAAC,OAA0B;QACnC,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QAC7B,OAAO,OAAO,CAAC;IACjB,CAAC;IACD,KAAK,CAAC,iBAAiB,CAAC,OAAsC;QAC5D,OAAO,CAAC;QACR,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IAGD,KAAK,CAAC,eAAe,CAAC,OAAsC;QAC1D,OAAO,CAAC;QACR,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IACD,KAAK,CAAC,mBAAmB,CAAC,OAAkC;QAC1D,OAAO,CAAC;QACR,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IAED,KAAK,CAAC,sBAAsB;QAC1B,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IACD,KAAK,CAAC,oBAAoB,CAAC,OAAsC;QAC/D,OAAO,CAAC;QACR,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IACD,mBAAmB,KAAU,CAAC;CAC/B","sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport type { AppleTransaction, GoogleTransaction, Product, SubscriptionsPlugin, Transaction } from './definitions';\n\nexport class SubscriptionsWeb extends WebPlugin implements SubscriptionsPlugin {\n  setGoogleVerificationDetails(options: { googleVerifyEndpoint: string; bid: string }): void {\n    options;\n  }\n  async echo(options: { value: string }): Promise<{ value: string }> {\n    console.log('ECHO', options);\n    return options;\n  }\n  async getProductDetails(options: { productIdentifier: string }): Promise<Product> {\n    options;\n    throw new Error('Method not implemented.');\n  }\n  purchaseProduct(options: { productIdentifier: string; appAccountToken?: string }): Promise<AppleTransaction>;\n  purchaseProduct(options: { productIdentifier: string; obfuscatedAccountId?: string }): Promise<GoogleTransaction>;\n  async purchaseProduct(options: { productIdentifier: string }): Promise<Transaction> {\n    options;\n    throw new Error('Method not implemented.');\n  }\n  async acknowledgePurchase(options: { purchaseToken: string }): Promise<void> {\n    options;\n    throw new Error('Method not implemented.');\n  }\n\n  async getCurrentEntitlements(): Promise<{ entitlements: Transaction[] }> {\n    throw new Error('Method not implemented.');\n  }\n  async getLatestTransaction(options: { productIdentifier: string }): Promise<Transaction> {\n    options;\n    throw new Error('Method not implemented.');\n  }\n  manageSubscriptions(): void {}\n}\n"]}