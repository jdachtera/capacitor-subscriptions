{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"AAAA,OAAO,EAAwB,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAIlE,MAAM,OAAO,gBAAiB,SAAQ,SAAS;IAC7C,4BAA4B,CAAC,OAAsD;QACjF,OAAO,CAAC;QACR,OAAO,CAAC,IAAI,CAAC,sDAAsD,CAAC,CAAC;IACvE,CAAC;IAED,KAAK,CAAC,IAAI,CAAC,OAA0B;QACnC,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QAC7B,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,KAAK,CAAC,iBAAiB,CAAC,OAAsC;QAC5D,OAAO,CAAC;QACR,MAAM,IAAI,KAAK,CAAC,2DAA2D,CAAC,CAAC;IAC/E,CAAC;IAED,KAAK,CAAC,sBAAsB,CAAC,OAAiC;QAC5D,OAAO,CAAC;QACR,MAAM,IAAI,KAAK,CAAC,gEAAgE,CAAC,CAAC;IACpF,CAAC;IAID,KAAK,CAAC,eAAe,CAAC,OAAsC;QAC1D,OAAO,CAAC;QACR,MAAM,IAAI,KAAK,CAAC,yDAAyD,CAAC,CAAC;IAC7E,CAAC;IAED,KAAK,CAAC,sBAAsB;QAC1B,OAAO,EAAE,YAAY,EAAE,EAAE,EAAE,CAAC;IAC9B,CAAC;IAED,KAAK,CAAC,oBAAoB,CAAC,OAAsC;QAC/D,OAAO,CAAC;QACR,MAAM,IAAI,KAAK,CAAC,8DAA8D,CAAC,CAAC;IAClF,CAAC;IAED,mBAAmB;QACjB,OAAO,CAAC,IAAI,CAAC,6DAA6D,CAAC,CAAC;IAC9E,CAAC;IAED,KAAK,CAAC,mBAAmB,CAAC,OAAkC;QAC1D,OAAO,CAAC;QACR,MAAM,IAAI,KAAK,CAAC,6DAA6D,CAAC,CAAC;IACjF,CAAC;IAYD,WAAW,CACT,SAAiB,EACjB,aAAuC;QAEvC,OAAO,CAAC,IAAI,CAAC,8BAA8B,SAAS,2BAA2B,CAAC,CAAC;QACjF,OAAO,OAAO,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,GAAE,CAAC,EAAE,CAAQ,CAAC;IACtD,CAAC;CACF","sourcesContent":["import { PluginListenerHandle, WebPlugin } from '@capacitor/core';\n\nimport type { AppleTransaction, GoogleTransaction, Product, SubscriptionsPlugin, Transaction } from './definitions';\n\nexport class SubscriptionsWeb extends WebPlugin implements SubscriptionsPlugin {\n  setGoogleVerificationDetails(options: { googleVerifyEndpoint: string; bid: string }): void {\n    options;\n    console.warn('setGoogleVerificationDetails is not supported on web');\n  }\n\n  async echo(options: { value: string }): Promise<{ value: string }> {\n    console.log('ECHO', options);\n    return options;\n  }\n\n  async getProductDetails(options: { productIdentifier: string }): Promise<Product> {\n    options;\n    throw new Error('Subscriptions: getProductDetails is not available on web.');\n  }\n\n  async getProductDetailsBatch(options: { productIds: string[] }): Promise<{ products: Product[] }> {\n    options;\n    throw new Error('Subscriptions: getProductDetailsBatch is not available on web.');\n  }\n\n  purchaseProduct(options: { productIdentifier: string; appAccountToken?: string }): Promise<AppleTransaction>;\n  purchaseProduct(options: { productIdentifier: string; obfuscatedAccountId?: string }): Promise<GoogleTransaction>;\n  async purchaseProduct(options: { productIdentifier: string }): Promise<Transaction> {\n    options;\n    throw new Error('Subscriptions: purchaseProduct is not available on web.');\n  }\n\n  async getCurrentEntitlements(): Promise<{ entitlements: Transaction[] }> {\n    return { entitlements: [] };\n  }\n\n  async getLatestTransaction(options: { productIdentifier: string }): Promise<Transaction> {\n    options;\n    throw new Error('Subscriptions: getLatestTransaction is not available on web.');\n  }\n\n  manageSubscriptions(): void {\n    console.warn('Subscriptions: manageSubscriptions is not available on web.');\n  }\n\n  async acknowledgePurchase(options: { purchaseToken: string }): Promise<void> {\n    options;\n    throw new Error('Subscriptions: acknowledgePurchase is not available on web.');\n  }\n\n  addListener(\n    eventName: 'ANDROID-PURCHASE-SUCCESS',\n    listenerFunc: (response: GoogleTransaction) => void,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  addListener(\n    eventName: 'ANDROID-PURCHASE-ERROR',\n    listenerFunc: () => void,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  addListener(\n    eventName: string,\n    _listenerFunc: (...args: any[]) => void,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle {\n    console.warn(`Subscriptions: addListener(${eventName}) is not supported on web`);\n    return Promise.resolve({ remove: () => {} }) as any;\n  }\n}\n"]}